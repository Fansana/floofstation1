using System.Security.Cryptography.X509Certificates;
using Content.Shared._Floof.Examine;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;
using Robust.Shared.Utility;
using Serilog;


namespace Content.Client._Floof.Examine;


[GenerateTypedNameReferences]
public sealed partial class CustomExaminePart : Control
{
    [Dependency] private readonly IGameTiming _timing = default!;

    public string? Title { get; set; }
    public int MaxContentLength { get; set; }

    private TimeSpan _lastUpdated = TimeSpan.MinValue;

    public CustomExaminePart()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        Action<object?> onUpdate = _ => _lastUpdated = _timing.CurTime;
        Content.OnTextChanged += args =>
        {
            onUpdate(args);

            var text = Rope.Collapse(args.TextRope);
            var length = FormattedMessage.EscapeText(text).Length;
            TextCounter.Text = $"{length}/{MaxContentLength} ";

            if (text.Length > SharedCustomExamineSystem.AbsolutelyMaxLength || length > MaxContentLength)
                TextCounter.Text += Loc.GetString("custom-examine-too-long");
        };
        NsfwCheckbox.OnToggled += onUpdate;
        DistanceSpin.ValueChanged += onUpdate;
        ExpirationSpin.ValueChanged += onUpdate;
    }

    protected override void EnteredTree()
    {
        TitleLabel.Text = Title;
    }

    public void SetData(CustomExamineData data, bool force = false)
    {
        // Simply to prevent e.g. a state reset from overwriting the data since the server is going to send a new comp state
        if (!force && data.LastUpdate < _lastUpdated)
            return;

        _lastUpdated = data.LastUpdate;

        Content.TextRope = new Rope.Leaf(data.Content ?? String.Empty);
        NsfwCheckbox.Pressed = data.RequiresConsent;
        DistanceSpin.Value = data.VisibilityRange;
        ExpirationSpin.Value = data.ExpireTime.Ticks == 0 || data.ExpireTime < _timing.CurTime
            ? 0
            : (int) Math.Ceiling((data.ExpireTime - _timing.CurTime).TotalMinutes);
    }

    public CustomExamineData GetData() =>
        new()
        {
            Content = Rope.Collapse(Content.TextRope),
            RequiresConsent = NsfwCheckbox.Pressed,
            VisibilityRange = (int) DistanceSpin.Value,
            ExpireTime = _timing.CurTime + TimeSpan.FromMinutes(ExpirationSpin.Value),
            LastUpdate = _lastUpdated
        };
}

