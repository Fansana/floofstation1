using Content.Client.UserInterface.Controls;
using Content.Shared.CCVar;
using Content.Shared.Consent;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.Consent.UI.Windows;

[GenerateTypedNameReferences]
public sealed partial class ConsentWindow : FancyWindow
{
    [Dependency] private readonly IClientConsentManager _consentManager = default!;
    [Dependency] private readonly IConfigurationManager _configManager = default!;

    private ButtonGroup Example1Buttons;

    public ConsentWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        SaveConsentSettings.OnPressed += _ => {
            SaveConsentSettings.Disabled = true;
            _consentManager.UpdateConsent(GetSettings());
        };

        _consentManager.OnServerDataLoaded += UpdateUi;
        if (_consentManager.HasLoaded)
            UpdateUi();

        ConsentFreetext.Placeholder = new Rope.Leaf(Loc.GetString("consent-window-freetext-placeholder"));
        ConsentFreetext.OnTextChanged += _ => UnsavedChanges();

        Example1Buttons = new ButtonGroup();
        ConsentToggleExample1On.Group = Example1Buttons;
        ConsentToggleExample1On.OnToggled += _ => UnsavedChanges();
        ConsentToggleExample1Off.Group = Example1Buttons;
        ConsentToggleExample1Off.OnToggled += _ => UnsavedChanges();
    }

    private PlayerConsentSettings GetSettings()
    {
        var text = Rope.Collapse(ConsentFreetext.TextRope);
        var toggles = new Dictionary<ProtoId<ConsentTogglePrototype>, string>();

        if (Example1Buttons.Pressed == ConsentToggleExample1On)
        {
            toggles["Example1"] = "on";
        }

        return new(text, toggles);
    }

    private void UnsavedChanges()
    {
        // Validate freetext length
        var maxLength = _configManager.GetCVar(CCVars.ConsentFreetextMaxLength);
        var length = Rope.Collapse(ConsentFreetext.TextRope).Length;

        if (length > maxLength)
        {
            SaveLabel.Text = Loc.GetString("consent-window-char-limit-warning", ("length", length), ("maxLength", maxLength));
            SaveConsentSettings.Disabled = true;

            return;
        }

        // If everything is valid, enable save button and inform user they need to save.
        SaveLabel.Text = Loc.GetString("consent-window-unsaved-changes");
        SaveConsentSettings.Disabled = false;
    }

    public void UpdateUi()
    {
        var consent = _consentManager.GetConsent();

        ConsentToggleExample1Off.Pressed = true;

        ConsentFreetext.TextRope = new Rope.Leaf(consent.Freetext);
        foreach (var toggle in consent.Toggles)
        {
            if (toggle.Key == "Example1" && toggle.Value == "on")
            {
                ConsentToggleExample1On.Pressed = true;
            }
            else
            {
                throw new InvalidOperationException("Invalid consent toggle");
            }
        }

        SaveConsentSettings.Disabled = true;
        SaveLabel.Text = "";
    }
}
