using Content.Shared.Clothing.Loadouts.Prototypes;
using Content.Shared.Clothing.Loadouts.Systems;
using Content.Shared.IdentityManagement;
using Content.Shared.Paint;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;


namespace Content.Client.Lobby.UI;


[GenerateTypedNameReferences]
public sealed partial class LoadoutPreferenceSelectorSpecial : PanelContainer
{
    public LoadoutPreferenceSelector Parent;
    public LoadoutPreference Preference => Parent.Preference;
    public LoadoutPrototype Loadout => Parent.Loadout;
    public IEntityManager EntMan => Parent._entityManager;

    public LoadoutPreferenceSelectorSpecial(LoadoutPreferenceSelector parent)
    {
        RobustXamlLoader.Load(this);
        Parent = parent;

        SaveButton.OnPressed += _ =>
        {
            Preference.CustomColorTint = GetColorTint()?.ToHex();
            Preference.Selected = Parent.PreferenceButton.Pressed;
            Parent.InvokePreferenceChanged();
            UpdateState();
        };
        NameEdit.OnTextChanged += _ =>
            Preference.CustomName = string.IsNullOrEmpty(NameEdit.Text) ? null : NameEdit.Text;
        DescriptionEdit.OnTextChanged += _ =>
            Preference.CustomDescription = string.IsNullOrEmpty(Rope.Collapse(DescriptionEdit.TextRope)) ? null : Rope.Collapse(DescriptionEdit.TextRope);
        SpecialColorTintToggle.OnToggled += args =>
            UpdateState(false);
        ColorEdit.OnColorChanged += _ =>
        {
            Preference.CustomColorTint = GetColorTint()?.ToHex();
            Parent.UpdatePaint();
        };

        UpdateState();
    }

    /// <summary>
    ///     Updates the UI state.
    /// </summary>
    /// <param name="fetchPreferenceData">Whether the states of toggle buttons and fields should be fetched from the parent on this invocation.</param>
    public void UpdateState(bool fetchPreferenceData = true)
    {
        if (fetchPreferenceData)
        {
            NameEdit.Text = Parent.Preference.CustomName ?? "";
            DescriptionEdit.TextRope = new Rope.Leaf(Parent.Preference.CustomDescription ?? "");
            SpecialColorTintToggle.Pressed = Parent.Preference.CustomColorTint != null;
            ColorEdit.Color = Color.FromHex(Parent.Preference.CustomColorTint, Color.White);
        }

        SpecialName.Visible = Parent.Loadout.CustomName;
        SpecialDescription.Visible = Parent.Loadout.CustomDescription;
        SpecialColorTintToggle.Visible = Parent.Loadout.CustomColorTint;
        ColorEdit.Visible = Parent.Loadout.CustomColorTint && SpecialColorTintToggle.Pressed;

        // ...future me problem. call me when wizden decides to randomly remove TryGetString but yet keep GetString.
        #pragma warning disable CS0618 // Type or member is obsolete

        NameEdit.PlaceHolder = Loc.TryGetString($"loadout-name-{Loadout.ID}", out var intrinsic)
            ? intrinsic
            : EntMan.GetComponent<MetaDataComponent>(Parent.DummyEntityUid).EntityName;

        DescriptionEdit.Placeholder = new Rope.Leaf(Loc.TryGetString($"loadout-description-{Loadout.ID}", out intrinsic)
            ? intrinsic
            : EntMan.GetComponent<MetaDataComponent>(Parent.DummyEntityUid).EntityDescription);

        #pragma warning restore CS0618 // Type or member is obsolete
    }

    public Color? GetColorTint() => SpecialColorTintToggle.Pressed ? ColorEdit.Color : null;
}

